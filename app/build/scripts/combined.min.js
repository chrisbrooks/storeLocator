function MarkerLabel_(a, b, c) {
    this.marker_ = a;
    this.handCursorURL_ = a.handCursorURL;
    this.labelDiv_ = document.createElement("div");
    this.labelDiv_.style.cssText = "position: absolute; overflow: hidden;";
    this.eventDiv_ = document.createElement("div");
    this.eventDiv_.style.cssText = this.labelDiv_.style.cssText;
    this.eventDiv_.setAttribute("onselectstart", "return false;");
    this.eventDiv_.setAttribute("ondragstart", "return false;");
    this.crossDiv_ = MarkerLabel_.getSharedCross(b);
}

MarkerLabel_.prototype = new google.maps.OverlayView();

MarkerLabel_.getSharedCross = function(a) {
    var b;
    if (typeof MarkerLabel_.getSharedCross.crossDiv === "undefined") {
        b = document.createElement("img");
        b.style.cssText = "position: absolute; z-index: 1000002; display: none;";
        b.style.marginLeft = "-8px";
        b.style.marginTop = "-9px";
        b.src = a;
        MarkerLabel_.getSharedCross.crossDiv = b;
    }
    return MarkerLabel_.getSharedCross.crossDiv;
};

MarkerLabel_.prototype.onAdd = function() {
    var a = this;
    var b = false;
    var c = false;
    var d;
    var e, f;
    var g;
    var h;
    var i;
    var j;
    var k = 20;
    var l = "url(" + this.handCursorURL_ + ")";
    var m = function(a) {
        if (a.preventDefault) {
            a.preventDefault();
        }
        a.cancelBubble = true;
        if (a.stopPropagation) {
            a.stopPropagation();
        }
    };
    var n = function() {
        a.marker_.setAnimation(null);
    };
    this.getPanes().overlayImage.appendChild(this.labelDiv_);
    this.getPanes().overlayMouseTarget.appendChild(this.eventDiv_);
    if (typeof MarkerLabel_.getSharedCross.processed === "undefined") {
        this.getPanes().overlayImage.appendChild(this.crossDiv_);
        MarkerLabel_.getSharedCross.processed = true;
    }
    this.listeners_ = [ google.maps.event.addDomListener(this.eventDiv_, "mouseover", function(b) {
        if (a.marker_.getDraggable() || a.marker_.getClickable()) {
            this.style.cursor = "pointer";
            google.maps.event.trigger(a.marker_, "mouseover", b);
        }
    }), google.maps.event.addDomListener(this.eventDiv_, "mouseout", function(b) {
        if ((a.marker_.getDraggable() || a.marker_.getClickable()) && !c) {
            this.style.cursor = a.marker_.getCursor();
            google.maps.event.trigger(a.marker_, "mouseout", b);
        }
    }), google.maps.event.addDomListener(this.eventDiv_, "mousedown", function(d) {
        c = false;
        if (a.marker_.getDraggable()) {
            b = true;
            this.style.cursor = l;
        }
        if (a.marker_.getDraggable() || a.marker_.getClickable()) {
            google.maps.event.trigger(a.marker_, "mousedown", d);
            m(d);
        }
    }), google.maps.event.addDomListener(document, "mouseup", function(e) {
        var f;
        if (b) {
            b = false;
            a.eventDiv_.style.cursor = "pointer";
            google.maps.event.trigger(a.marker_, "mouseup", e);
        }
        if (c) {
            if (h) {
                f = a.getProjection().fromLatLngToDivPixel(a.marker_.getPosition());
                f.y += k;
                a.marker_.setPosition(a.getProjection().fromDivPixelToLatLng(f));
                try {
                    a.marker_.setAnimation(google.maps.Animation.BOUNCE);
                    setTimeout(n, 1406);
                } catch (i) {}
            }
            a.crossDiv_.style.display = "none";
            a.marker_.setZIndex(d);
            g = true;
            c = false;
            e.latLng = a.marker_.getPosition();
            google.maps.event.trigger(a.marker_, "dragend", e);
        }
    }), google.maps.event.addListener(a.marker_.getMap(), "mousemove", function(g) {
        var l;
        if (b) {
            if (c) {
                g.latLng = new google.maps.LatLng(g.latLng.lat() - e, g.latLng.lng() - f);
                l = a.getProjection().fromLatLngToDivPixel(g.latLng);
                if (h) {
                    a.crossDiv_.style.left = l.x + "px";
                    a.crossDiv_.style.top = l.y + "px";
                    a.crossDiv_.style.display = "";
                    l.y -= k;
                }
                a.marker_.setPosition(a.getProjection().fromDivPixelToLatLng(l));
                if (h) {
                    a.eventDiv_.style.top = l.y + k + "px";
                }
                google.maps.event.trigger(a.marker_, "drag", g);
            } else {
                e = g.latLng.lat() - a.marker_.getPosition().lat();
                f = g.latLng.lng() - a.marker_.getPosition().lng();
                d = a.marker_.getZIndex();
                i = a.marker_.getPosition();
                j = a.marker_.getMap().getCenter();
                h = a.marker_.get("raiseOnDrag");
                c = true;
                a.marker_.setZIndex(1e6);
                g.latLng = a.marker_.getPosition();
                google.maps.event.trigger(a.marker_, "dragstart", g);
            }
        }
    }), google.maps.event.addDomListener(document, "keydown", function(b) {
        if (c) {
            if (b.keyCode === 27) {
                h = false;
                a.marker_.setPosition(i);
                a.marker_.getMap().setCenter(j);
                google.maps.event.trigger(document, "mouseup", b);
            }
        }
    }), google.maps.event.addDomListener(this.eventDiv_, "click", function(b) {
        if (a.marker_.getDraggable() || a.marker_.getClickable()) {
            if (g) {
                g = false;
            } else {
                google.maps.event.trigger(a.marker_, "click", b);
                m(b);
            }
        }
    }), google.maps.event.addDomListener(this.eventDiv_, "dblclick", function(b) {
        if (a.marker_.getDraggable() || a.marker_.getClickable()) {
            google.maps.event.trigger(a.marker_, "dblclick", b);
            m(b);
        }
    }), google.maps.event.addListener(this.marker_, "dragstart", function(a) {
        if (!c) {
            h = this.get("raiseOnDrag");
        }
    }), google.maps.event.addListener(this.marker_, "drag", function(b) {
        if (!c) {
            if (h) {
                a.setPosition(k);
                a.labelDiv_.style.zIndex = 1e6 + (this.get("labelInBackground") ? -1 : +1);
            }
        }
    }), google.maps.event.addListener(this.marker_, "dragend", function(b) {
        if (!c) {
            if (h) {
                a.setPosition(0);
            }
        }
    }), google.maps.event.addListener(this.marker_, "position_changed", function() {
        a.setPosition();
    }), google.maps.event.addListener(this.marker_, "zindex_changed", function() {
        a.setZIndex();
    }), google.maps.event.addListener(this.marker_, "visible_changed", function() {
        a.setVisible();
    }), google.maps.event.addListener(this.marker_, "labelvisible_changed", function() {
        a.setVisible();
    }), google.maps.event.addListener(this.marker_, "title_changed", function() {
        a.setTitle();
    }), google.maps.event.addListener(this.marker_, "labelcontent_changed", function() {
        a.setContent();
    }), google.maps.event.addListener(this.marker_, "labelanchor_changed", function() {
        a.setAnchor();
    }), google.maps.event.addListener(this.marker_, "labelclass_changed", function() {
        a.setStyles();
    }), google.maps.event.addListener(this.marker_, "labelstyle_changed", function() {
        a.setStyles();
    }) ];
};

MarkerLabel_.prototype.onRemove = function() {
    var a;
    this.labelDiv_.parentNode.removeChild(this.labelDiv_);
    this.eventDiv_.parentNode.removeChild(this.eventDiv_);
    for (a = 0; a < this.listeners_.length; a++) {
        google.maps.event.removeListener(this.listeners_[a]);
    }
};

MarkerLabel_.prototype.draw = function() {
    this.setContent();
    this.setTitle();
    this.setStyles();
};

MarkerLabel_.prototype.setContent = function() {
    var a = this.marker_.get("labelContent");
    if (typeof a.nodeType === "undefined") {
        this.labelDiv_.innerHTML = a;
        this.eventDiv_.innerHTML = this.labelDiv_.innerHTML;
    } else {
        this.labelDiv_.innerHTML = "";
        this.labelDiv_.appendChild(a);
        a = a.cloneNode(true);
        this.eventDiv_.appendChild(a);
    }
};

MarkerLabel_.prototype.setTitle = function() {
    this.eventDiv_.title = this.marker_.getTitle() || "";
};

MarkerLabel_.prototype.setStyles = function() {
    var a, b;
    this.labelDiv_.className = this.marker_.get("labelClass");
    this.eventDiv_.className = this.labelDiv_.className;
    this.labelDiv_.style.cssText = "";
    this.eventDiv_.style.cssText = "";
    b = this.marker_.get("labelStyle");
    for (a in b) {
        if (b.hasOwnProperty(a)) {
            this.labelDiv_.style[a] = b[a];
            this.eventDiv_.style[a] = b[a];
        }
    }
    this.setMandatoryStyles();
};

MarkerLabel_.prototype.setMandatoryStyles = function() {
    this.labelDiv_.style.position = "absolute";
    this.labelDiv_.style.overflow = "hidden";
    if (typeof this.labelDiv_.style.opacity !== "undefined" && this.labelDiv_.style.opacity !== "") {
        this.labelDiv_.style.MsFilter = '"progid:DXImageTransform.Microsoft.Alpha(opacity=' + this.labelDiv_.style.opacity * 100 + ')"';
        this.labelDiv_.style.filter = "alpha(opacity=" + this.labelDiv_.style.opacity * 100 + ")";
    }
    this.eventDiv_.style.position = this.labelDiv_.style.position;
    this.eventDiv_.style.overflow = this.labelDiv_.style.overflow;
    this.eventDiv_.style.opacity = .01;
    this.eventDiv_.style.MsFilter = '"progid:DXImageTransform.Microsoft.Alpha(opacity=1)"';
    this.eventDiv_.style.filter = "alpha(opacity=1)";
    this.setAnchor();
    this.setPosition();
    this.setVisible();
};

MarkerLabel_.prototype.setAnchor = function() {
    var a = this.marker_.get("labelAnchor");
    this.labelDiv_.style.marginLeft = -a.x + "px";
    this.labelDiv_.style.marginTop = -a.y + "px";
    this.eventDiv_.style.marginLeft = -a.x + "px";
    this.eventDiv_.style.marginTop = -a.y + "px";
};

MarkerLabel_.prototype.setPosition = function(a) {
    var b = this.getProjection().fromLatLngToDivPixel(this.marker_.getPosition());
    if (typeof a === "undefined") {
        a = 0;
    }
    this.labelDiv_.style.left = Math.round(b.x) + "px";
    this.labelDiv_.style.top = Math.round(b.y - a) + "px";
    this.eventDiv_.style.left = this.labelDiv_.style.left;
    this.eventDiv_.style.top = this.labelDiv_.style.top;
    this.setZIndex();
};

MarkerLabel_.prototype.setZIndex = function() {
    var a = this.marker_.get("labelInBackground") ? -1 : +1;
    if (typeof this.marker_.getZIndex() === "undefined") {
        this.labelDiv_.style.zIndex = parseInt(this.labelDiv_.style.top, 10) + a;
        this.eventDiv_.style.zIndex = this.labelDiv_.style.zIndex;
    } else {
        this.labelDiv_.style.zIndex = this.marker_.getZIndex() + a;
        this.eventDiv_.style.zIndex = this.labelDiv_.style.zIndex;
    }
};

MarkerLabel_.prototype.setVisible = function() {
    if (this.marker_.get("labelVisible")) {
        this.labelDiv_.style.display = this.marker_.getVisible() ? "block" : "none";
    } else {
        this.labelDiv_.style.display = "none";
    }
    this.eventDiv_.style.display = this.labelDiv_.style.display;
};

function MarkerWithLabel(a) {
    a = a || {};
    a.labelContent = a.labelContent || "";
    a.labelAnchor = a.labelAnchor || new google.maps.Point(0, 0);
    a.labelClass = a.labelClass || "markerLabels";
    a.labelStyle = a.labelStyle || {};
    a.labelInBackground = a.labelInBackground || false;
    if (typeof a.labelVisible === "undefined") {
        a.labelVisible = true;
    }
    if (typeof a.raiseOnDrag === "undefined") {
        a.raiseOnDrag = true;
    }
    if (typeof a.clickable === "undefined") {
        a.clickable = true;
    }
    if (typeof a.draggable === "undefined") {
        a.draggable = false;
    }
    if (typeof a.optimized === "undefined") {
        a.optimized = false;
    }
    a.crossImage = a.crossImage || "http" + (document.location.protocol === "https:" ? "s" : "") + "://maps.gstatic.com/intl/en_us/mapfiles/drag_cross_67_16.png";
    a.handCursor = a.handCursor || "http" + (document.location.protocol === "https:" ? "s" : "") + "://maps.gstatic.com/intl/en_us/mapfiles/closedhand_8_8.cur";
    a.optimized = false;
    this.label = new MarkerLabel_(this, a.crossImage, a.handCursor);
    google.maps.Marker.apply(this, arguments);
}

MarkerWithLabel.prototype = new google.maps.Marker();

MarkerWithLabel.prototype.setMap = function(a) {
    google.maps.Marker.prototype.setMap.apply(this, arguments);
    this.label.setMap(a);
};

!function(a) {
    "function" == typeof define && define.amd ? define([ "jquery" ], a) : "object" == typeof exports ? module.exports = a : a(jQuery);
}(function(a) {
    function b(b) {
        var g = b || window.event, h = i.call(arguments, 1), j = 0, l = 0, m = 0, n = 0, o = 0, p = 0;
        if (b = a.event.fix(g), b.type = "mousewheel", "detail" in g && (m = -1 * g.detail), 
        "wheelDelta" in g && (m = g.wheelDelta), "wheelDeltaY" in g && (m = g.wheelDeltaY), 
        "wheelDeltaX" in g && (l = -1 * g.wheelDeltaX), "axis" in g && g.axis === g.HORIZONTAL_AXIS && (l = -1 * m, 
        m = 0), j = 0 === m ? l : m, "deltaY" in g && (m = -1 * g.deltaY, j = m), "deltaX" in g && (l = g.deltaX, 
        0 === m && (j = -1 * l)), 0 !== m || 0 !== l) {
            if (1 === g.deltaMode) {
                var q = a.data(this, "mousewheel-line-height");
                j *= q, m *= q, l *= q;
            } else if (2 === g.deltaMode) {
                var r = a.data(this, "mousewheel-page-height");
                j *= r, m *= r, l *= r;
            }
            if (n = Math.max(Math.abs(m), Math.abs(l)), (!f || f > n) && (f = n, d(g, n) && (f /= 40)), 
            d(g, n) && (j /= 40, l /= 40, m /= 40), j = Math[j >= 1 ? "floor" : "ceil"](j / f), 
            l = Math[l >= 1 ? "floor" : "ceil"](l / f), m = Math[m >= 1 ? "floor" : "ceil"](m / f), 
            k.settings.normalizeOffset && this.getBoundingClientRect) {
                var s = this.getBoundingClientRect();
                o = b.clientX - s.left, p = b.clientY - s.top;
            }
            return b.deltaX = l, b.deltaY = m, b.deltaFactor = f, b.offsetX = o, b.offsetY = p, 
            b.deltaMode = 0, h.unshift(b, j, l, m), e && clearTimeout(e), e = setTimeout(c, 200), 
            (a.event.dispatch || a.event.handle).apply(this, h);
        }
    }
    function c() {
        f = null;
    }
    function d(a, b) {
        return k.settings.adjustOldDeltas && "mousewheel" === a.type && b % 120 === 0;
    }
    var e, f, g = [ "wheel", "mousewheel", "DOMMouseScroll", "MozMousePixelScroll" ], h = "onwheel" in document || document.documentMode >= 9 ? [ "wheel" ] : [ "mousewheel", "DomMouseScroll", "MozMousePixelScroll" ], i = Array.prototype.slice;
    if (a.event.fixHooks) for (var j = g.length; j; ) a.event.fixHooks[g[--j]] = a.event.mouseHooks;
    var k = a.event.special.mousewheel = {
        version: "3.1.11",
        setup: function() {
            if (this.addEventListener) for (var c = h.length; c; ) this.addEventListener(h[--c], b, !1); else this.onmousewheel = b;
            a.data(this, "mousewheel-line-height", k.getLineHeight(this)), a.data(this, "mousewheel-page-height", k.getPageHeight(this));
        },
        teardown: function() {
            if (this.removeEventListener) for (var c = h.length; c; ) this.removeEventListener(h[--c], b, !1); else this.onmousewheel = null;
            a.removeData(this, "mousewheel-line-height"), a.removeData(this, "mousewheel-page-height");
        },
        getLineHeight: function(b) {
            var c = a(b)["offsetParent" in a.fn ? "offsetParent" : "parent"]();
            return c.length || (c = a("body")), parseInt(c.css("fontSize"), 10);
        },
        getPageHeight: function(b) {
            return a(b).height();
        },
        settings: {
            adjustOldDeltas: !0,
            normalizeOffset: !0
        }
    };
    a.fn.extend({
        mousewheel: function(a) {
            return a ? this.bind("mousewheel", a) : this.trigger("mousewheel");
        },
        unmousewheel: function(a) {
            return this.unbind("mousewheel", a);
        }
    });
});

!function(a, b, c) {
    !function(b) {
        var d = "function" == typeof define && define.amd, e = "https:" == c.location.protocol ? "https:" : "http:", f = "cdnjs.cloudflare.com/ajax/libs/jquery-mousewheel/3.1.11/jquery.mousewheel.min.js";
        d || a.event.special.mousewheel || a("head").append(decodeURI("%3Cscript src=" + e + "//" + f + "%3E%3C/script%3E")), 
        b();
    }(function() {
        var d = "mCustomScrollbar", e = "mCS", f = ".mCustomScrollbar", g = {
            setWidth: !1,
            setHeight: !1,
            setTop: 0,
            setLeft: 0,
            axis: "y",
            scrollbarPosition: "inside",
            scrollInertia: 950,
            autoDraggerLength: !0,
            autoHideScrollbar: !1,
            autoExpandScrollbar: !1,
            alwaysShowScrollbar: 0,
            snapAmount: null,
            snapOffset: 0,
            mouseWheel: {
                enable: !0,
                scrollAmount: "auto",
                axis: "y",
                preventDefault: !1,
                deltaFactor: "auto",
                normalizeDelta: !1,
                invert: !1,
                disableOver: [ "select", "option", "keygen", "datalist", "textarea" ]
            },
            scrollButtons: {
                enable: !1,
                scrollType: "stepless",
                scrollAmount: "auto"
            },
            keyboard: {
                enable: !0,
                scrollType: "stepless",
                scrollAmount: "auto"
            },
            contentTouchScroll: 25,
            advanced: {
                autoExpandHorizontalScroll: !1,
                autoScrollOnFocus: "input,textarea,select,button,datalist,keygen,a[tabindex],area,object,[contenteditable='true']",
                updateOnContentResize: !0,
                updateOnImageLoad: !0,
                updateOnSelectorChange: !1,
                releaseDraggableSelectors: !1
            },
            theme: "light",
            callbacks: {
                onInit: !1,
                onScrollStart: !1,
                onScroll: !1,
                onTotalScroll: !1,
                onTotalScrollBack: !1,
                whileScrolling: !1,
                onTotalScrollOffset: 0,
                onTotalScrollBackOffset: 0,
                alwaysTriggerOffsets: !0,
                onOverflowY: !1,
                onOverflowX: !1,
                onOverflowYNone: !1,
                onOverflowXNone: !1
            },
            live: !1,
            liveSelector: null
        }, h = 0, i = {}, j = function(a) {
            i[a] && (clearTimeout(i[a]), n._delete.call(null, i[a]));
        }, k = b.attachEvent && !b.addEventListener ? 1 : 0, l = !1, m = {
            init: function(b) {
                var b = a.extend(!0, {}, g, b), c = n._selector.call(this);
                if (b.live) {
                    var d = b.liveSelector || this.selector || f, k = a(d);
                    if ("off" === b.live) return void j(d);
                    i[d] = setTimeout(function() {
                        k.mCustomScrollbar(b), "once" === b.live && k.length && j(d);
                    }, 500);
                } else j(d);
                return b.setWidth = b.set_width ? b.set_width : b.setWidth, b.setHeight = b.set_height ? b.set_height : b.setHeight, 
                b.axis = b.horizontalScroll ? "x" : n._findAxis.call(null, b.axis), b.scrollInertia = b.scrollInertia > 0 && b.scrollInertia < 17 ? 17 : b.scrollInertia, 
                "object" != typeof b.mouseWheel && 1 == b.mouseWheel && (b.mouseWheel = {
                    enable: !0,
                    scrollAmount: "auto",
                    axis: "y",
                    preventDefault: !1,
                    deltaFactor: "auto",
                    normalizeDelta: !1,
                    invert: !1
                }), b.mouseWheel.scrollAmount = b.mouseWheelPixels ? b.mouseWheelPixels : b.mouseWheel.scrollAmount, 
                b.mouseWheel.normalizeDelta = b.advanced.normalizeMouseWheelDelta ? b.advanced.normalizeMouseWheelDelta : b.mouseWheel.normalizeDelta, 
                b.scrollButtons.scrollType = n._findScrollButtonsType.call(null, b.scrollButtons.scrollType), 
                n._theme.call(null, b), a(c).each(function() {
                    var c = a(this);
                    if (!c.data(e)) {
                        c.data(e, {
                            idx: ++h,
                            opt: b,
                            scrollRatio: {
                                y: null,
                                x: null
                            },
                            overflowed: null,
                            contentReset: {
                                y: null,
                                x: null
                            },
                            bindEvents: !1,
                            tweenRunning: !1,
                            sequential: {},
                            langDir: c.css("direction"),
                            cbOffsets: null,
                            trigger: null
                        });
                        var d = c.data(e).opt, f = c.data("mcs-axis"), g = c.data("mcs-scrollbar-position"), i = c.data("mcs-theme");
                        f && (d.axis = f), g && (d.scrollbarPosition = g), i && (d.theme = i, n._theme.call(null, d)), 
                        n._pluginMarkup.call(this), m.update.call(null, c);
                    }
                });
            },
            update: function(b) {
                var c = b || n._selector.call(this);
                return a(c).each(function() {
                    var b = a(this);
                    if (b.data(e)) {
                        var c = b.data(e), d = c.opt, f = a("#mCSB_" + c.idx + "_container"), g = [ a("#mCSB_" + c.idx + "_dragger_vertical"), a("#mCSB_" + c.idx + "_dragger_horizontal") ];
                        if (!f.length) return;
                        c.tweenRunning && n._stop.call(null, b), b.hasClass("mCS_disabled") && b.removeClass("mCS_disabled"), 
                        b.hasClass("mCS_destroyed") && b.removeClass("mCS_destroyed"), n._maxHeight.call(this), 
                        n._expandContentHorizontally.call(this), "y" === d.axis || d.advanced.autoExpandHorizontalScroll || f.css("width", n._contentWidth(f.children())), 
                        c.overflowed = n._overflowed.call(this), n._scrollbarVisibility.call(this), d.autoDraggerLength && n._setDraggerLength.call(this), 
                        n._scrollRatio.call(this), n._bindEvents.call(this);
                        var h = [ Math.abs(f[0].offsetTop), Math.abs(f[0].offsetLeft) ];
                        "x" !== d.axis && (c.overflowed[0] ? g[0].height() > g[0].parent().height() ? n._resetContentPosition.call(this) : (n._scrollTo.call(this, b, h[0].toString(), {
                            dir: "y",
                            dur: 0,
                            overwrite: "none"
                        }), c.contentReset.y = null) : (n._resetContentPosition.call(this), "y" === d.axis ? n._unbindEvents.call(this) : "yx" === d.axis && c.overflowed[1] && n._scrollTo.call(this, b, h[1].toString(), {
                            dir: "x",
                            dur: 0,
                            overwrite: "none"
                        }))), "y" !== d.axis && (c.overflowed[1] ? g[1].width() > g[1].parent().width() ? n._resetContentPosition.call(this) : (n._scrollTo.call(this, b, h[1].toString(), {
                            dir: "x",
                            dur: 0,
                            overwrite: "none"
                        }), c.contentReset.x = null) : (n._resetContentPosition.call(this), "x" === d.axis ? n._unbindEvents.call(this) : "yx" === d.axis && c.overflowed[0] && n._scrollTo.call(this, b, h[0].toString(), {
                            dir: "y",
                            dur: 0,
                            overwrite: "none"
                        }))), n._autoUpdate.call(this);
                    }
                });
            },
            scrollTo: function(b, c) {
                if ("undefined" != typeof b && null != b) {
                    var d = n._selector.call(this);
                    return a(d).each(function() {
                        var d = a(this);
                        if (d.data(e)) {
                            var f = d.data(e), g = f.opt, h = {
                                trigger: "external",
                                scrollInertia: g.scrollInertia,
                                scrollEasing: "mcsEaseInOut",
                                moveDragger: !1,
                                timeout: 60,
                                callbacks: !0,
                                onStart: !0,
                                onUpdate: !0,
                                onComplete: !0
                            }, i = a.extend(!0, {}, h, c), j = n._arr.call(this, b), k = i.scrollInertia > 0 && i.scrollInertia < 17 ? 17 : i.scrollInertia;
                            j[0] = n._to.call(this, j[0], "y"), j[1] = n._to.call(this, j[1], "x"), i.moveDragger && (j[0] *= f.scrollRatio.y, 
                            j[1] *= f.scrollRatio.x), i.dur = k, setTimeout(function() {
                                null !== j[0] && "undefined" != typeof j[0] && "x" !== g.axis && f.overflowed[0] && (i.dir = "y", 
                                i.overwrite = "all", n._scrollTo.call(this, d, j[0].toString(), i)), null !== j[1] && "undefined" != typeof j[1] && "y" !== g.axis && f.overflowed[1] && (i.dir = "x", 
                                i.overwrite = "none", n._scrollTo.call(this, d, j[1].toString(), i));
                            }, i.timeout);
                        }
                    });
                }
            },
            stop: function() {
                var b = n._selector.call(this);
                return a(b).each(function() {
                    var b = a(this);
                    b.data(e) && n._stop.call(null, b);
                });
            },
            disable: function(b) {
                var c = n._selector.call(this);
                return a(c).each(function() {
                    var c = a(this);
                    if (c.data(e)) {
                        {
                            var d = c.data(e);
                            d.opt;
                        }
                        n._autoUpdate.call(this, "remove"), n._unbindEvents.call(this), b && n._resetContentPosition.call(this), 
                        n._scrollbarVisibility.call(this, !0), c.addClass("mCS_disabled");
                    }
                });
            },
            destroy: function() {
                var b = n._selector.call(this);
                return a(b).each(function() {
                    var c = a(this);
                    if (c.data(e)) {
                        var f = c.data(e), g = f.opt, h = a("#mCSB_" + f.idx), i = a("#mCSB_" + f.idx + "_container"), k = a(".mCSB_" + f.idx + "_scrollbar");
                        g.live && j(b), n._autoUpdate.call(this, "remove"), n._unbindEvents.call(this), 
                        n._resetContentPosition.call(this), c.removeData(e), n._delete.call(null, this.mcs), 
                        k.remove(), h.replaceWith(i.contents()), c.removeClass(d + " _" + e + "_" + f.idx + " mCS-autoHide mCS-dir-rtl mCS_no_scrollbar mCS_disabled").addClass("mCS_destroyed");
                    }
                });
            }
        }, n = {
            _selector: function() {
                return "object" != typeof a(this) || a(this).length < 1 ? f : this;
            },
            _theme: function(b) {
                var c = [ "rounded", "rounded-dark", "rounded-dots", "rounded-dots-dark" ], d = [ "rounded-dots", "rounded-dots-dark", "3d", "3d-dark", "3d-thick", "3d-thick-dark", "inset", "inset-dark", "inset-2", "inset-2-dark", "inset-3", "inset-3-dark" ], e = [ "minimal", "minimal-dark" ], f = [ "minimal", "minimal-dark" ], g = [ "minimal", "minimal-dark" ];
                b.autoDraggerLength = a.inArray(b.theme, c) > -1 ? !1 : b.autoDraggerLength, b.autoExpandScrollbar = a.inArray(b.theme, d) > -1 ? !1 : b.autoExpandScrollbar, 
                b.scrollButtons.enable = a.inArray(b.theme, e) > -1 ? !1 : b.scrollButtons.enable, 
                b.autoHideScrollbar = a.inArray(b.theme, f) > -1 ? !0 : b.autoHideScrollbar, b.scrollbarPosition = a.inArray(b.theme, g) > -1 ? "outside" : b.scrollbarPosition;
            },
            _findAxis: function(a) {
                return "yx" === a || "xy" === a || "auto" === a ? "yx" : "x" === a || "horizontal" === a ? "x" : "y";
            },
            _findScrollButtonsType: function(a) {
                return "stepped" === a || "pixels" === a || "step" === a || "click" === a ? "stepped" : "stepless";
            },
            _pluginMarkup: function() {
                var b = a(this), c = b.data(e), f = c.opt, g = f.autoExpandScrollbar ? " mCSB_scrollTools_onDrag_expand" : "", h = [ "<div id='mCSB_" + c.idx + "_scrollbar_vertical' class='mCSB_scrollTools mCSB_" + c.idx + "_scrollbar mCS-" + f.theme + " mCSB_scrollTools_vertical" + g + "'><div class='mCSB_draggerContainer'><div id='mCSB_" + c.idx + "_dragger_vertical' class='mCSB_dragger' style='position:absolute;' oncontextmenu='return false;'><div class='mCSB_dragger_bar' /></div><div class='mCSB_draggerRail' /></div></div>", "<div id='mCSB_" + c.idx + "_scrollbar_horizontal' class='mCSB_scrollTools mCSB_" + c.idx + "_scrollbar mCS-" + f.theme + " mCSB_scrollTools_horizontal" + g + "'><div class='mCSB_draggerContainer'><div id='mCSB_" + c.idx + "_dragger_horizontal' class='mCSB_dragger' style='position:absolute;' oncontextmenu='return false;'><div class='mCSB_dragger_bar' /></div><div class='mCSB_draggerRail' /></div></div>" ], i = "yx" === f.axis ? "mCSB_vertical_horizontal" : "x" === f.axis ? "mCSB_horizontal" : "mCSB_vertical", j = "yx" === f.axis ? h[0] + h[1] : "x" === f.axis ? h[1] : h[0], k = "yx" === f.axis ? "<div id='mCSB_" + c.idx + "_container_wrapper' class='mCSB_container_wrapper' />" : "", l = f.autoHideScrollbar ? " mCS-autoHide" : "", m = "x" !== f.axis && "rtl" === c.langDir ? " mCS-dir-rtl" : "";
                f.setWidth && b.css("width", f.setWidth), f.setHeight && b.css("height", f.setHeight), 
                f.setLeft = "y" !== f.axis && "rtl" === c.langDir ? "989999px" : f.setLeft, b.addClass(d + " _" + e + "_" + c.idx + l + m).wrapInner("<div id='mCSB_" + c.idx + "' class='mCustomScrollBox mCS-" + f.theme + " " + i + "'><div id='mCSB_" + c.idx + "_container' class='mCSB_container' style='position:relative; top:" + f.setTop + "; left:" + f.setLeft + ";' dir=" + c.langDir + " /></div>");
                var o = a("#mCSB_" + c.idx), p = a("#mCSB_" + c.idx + "_container");
                "y" === f.axis || f.advanced.autoExpandHorizontalScroll || p.css("width", n._contentWidth(p.children())), 
                "outside" === f.scrollbarPosition ? ("static" === b.css("position") && b.css("position", "relative"), 
                b.css("overflow", "visible"), o.addClass("mCSB_outside").after(j)) : (o.addClass("mCSB_inside").append(j), 
                p.wrap(k)), n._scrollButtons.call(this);
                var q = [ a("#mCSB_" + c.idx + "_dragger_vertical"), a("#mCSB_" + c.idx + "_dragger_horizontal") ];
                q[0].css("min-height", q[0].height()), q[1].css("min-width", q[1].width());
            },
            _contentWidth: function(b) {
                return Math.max.apply(Math, b.map(function() {
                    return a(this).outerWidth(!0);
                }).get());
            },
            _expandContentHorizontally: function() {
                var b = a(this), c = b.data(e), d = c.opt, f = a("#mCSB_" + c.idx + "_container");
                d.advanced.autoExpandHorizontalScroll && "y" !== d.axis && f.css({
                    position: "absolute",
                    width: "auto"
                }).wrap("<div class='mCSB_h_wrapper' style='position:relative; left:0; width:999999px;' />").css({
                    width: Math.ceil(f[0].getBoundingClientRect().right + .4) - Math.floor(f[0].getBoundingClientRect().left),
                    position: "relative"
                }).unwrap();
            },
            _scrollButtons: function() {
                var b = a(this), c = b.data(e), d = c.opt, f = a(".mCSB_" + c.idx + "_scrollbar:first"), g = [ "<a href='#' class='mCSB_buttonUp' oncontextmenu='return false;' />", "<a href='#' class='mCSB_buttonDown' oncontextmenu='return false;' />", "<a href='#' class='mCSB_buttonLeft' oncontextmenu='return false;' />", "<a href='#' class='mCSB_buttonRight' oncontextmenu='return false;' />" ], h = [ "x" === d.axis ? g[2] : g[0], "x" === d.axis ? g[3] : g[1], g[2], g[3] ];
                d.scrollButtons.enable && f.prepend(h[0]).append(h[1]).next(".mCSB_scrollTools").prepend(h[2]).append(h[3]);
            },
            _maxHeight: function() {
                var b = a(this), c = b.data(e), d = (c.opt, a("#mCSB_" + c.idx)), f = b.css("max-height"), g = -1 !== f.indexOf("%"), h = b.css("box-sizing");
                if ("none" !== f) {
                    var i = g ? b.parent().height() * parseInt(f) / 100 : parseInt(f);
                    "border-box" === h && (i -= b.innerHeight() - b.height() + (b.outerHeight() - b.innerHeight())), 
                    d.css("max-height", Math.round(i));
                }
            },
            _setDraggerLength: function() {
                var b = a(this), c = b.data(e), d = a("#mCSB_" + c.idx), f = a("#mCSB_" + c.idx + "_container"), g = [ a("#mCSB_" + c.idx + "_dragger_vertical"), a("#mCSB_" + c.idx + "_dragger_horizontal") ], h = [ d.height() / f.outerHeight(!1), d.width() / f.outerWidth(!1) ], i = [ parseInt(g[0].css("min-height")), Math.round(h[0] * g[0].parent().height()), parseInt(g[1].css("min-width")), Math.round(h[1] * g[1].parent().width()) ], j = k && i[1] < i[0] ? i[0] : i[1], l = k && i[3] < i[2] ? i[2] : i[3];
                g[0].css({
                    height: j,
                    "max-height": g[0].parent().height() - 10
                }).find(".mCSB_dragger_bar").css({
                    "line-height": i[0] + "px"
                }), g[1].css({
                    width: l,
                    "max-width": g[1].parent().width() - 10
                });
            },
            _scrollRatio: function() {
                var b = a(this), c = b.data(e), d = a("#mCSB_" + c.idx), f = a("#mCSB_" + c.idx + "_container"), g = [ a("#mCSB_" + c.idx + "_dragger_vertical"), a("#mCSB_" + c.idx + "_dragger_horizontal") ], h = [ f.outerHeight(!1) - d.height(), f.outerWidth(!1) - d.width() ], i = [ h[0] / (g[0].parent().height() - g[0].height()), h[1] / (g[1].parent().width() - g[1].width()) ];
                c.scrollRatio = {
                    y: i[0],
                    x: i[1]
                };
            },
            _onDragClasses: function(a, b, c) {
                var d = c ? "mCSB_dragger_onDrag_expanded" : "", e = [ "mCSB_dragger_onDrag", "mCSB_scrollTools_onDrag" ], f = a.closest(".mCSB_scrollTools");
                "active" === b ? (a.toggleClass(e[0] + " " + d), f.toggleClass(e[1]), a[0]._draggable = a[0]._draggable ? 0 : 1) : a[0]._draggable || ("hide" === b ? (a.removeClass(e[0]), 
                f.removeClass(e[1])) : (a.addClass(e[0]), f.addClass(e[1])));
            },
            _overflowed: function() {
                var b = a(this), c = b.data(e), d = a("#mCSB_" + c.idx), f = a("#mCSB_" + c.idx + "_container"), g = null == c.overflowed ? f.height() : f.outerHeight(!1), h = null == c.overflowed ? f.width() : f.outerWidth(!1);
                return [ g > d.height(), h > d.width() ];
            },
            _resetContentPosition: function() {
                var b = a(this), c = b.data(e), d = c.opt, f = a("#mCSB_" + c.idx), g = a("#mCSB_" + c.idx + "_container"), h = [ a("#mCSB_" + c.idx + "_dragger_vertical"), a("#mCSB_" + c.idx + "_dragger_horizontal") ];
                if (n._stop(b), ("x" !== d.axis && !c.overflowed[0] || "y" === d.axis && c.overflowed[0]) && (h[0].add(g).css("top", 0), 
                n._scrollTo(b, "_resetY")), "y" !== d.axis && !c.overflowed[1] || "x" === d.axis && c.overflowed[1]) {
                    var i = dx = 0;
                    "rtl" === c.langDir && (i = f.width() - g.outerWidth(!1), dx = Math.abs(i / c.scrollRatio.x)), 
                    g.css("left", i), h[1].css("left", dx), n._scrollTo(b, "_resetX");
                }
            },
            _bindEvents: function() {
                function b() {
                    g = setTimeout(function() {
                        a.event.special.mousewheel ? (clearTimeout(g), n._mousewheel.call(c[0])) : b();
                    }, 1e3);
                }
                var c = a(this), d = c.data(e), f = d.opt;
                if (!d.bindEvents) {
                    if (n._draggable.call(this), f.contentTouchScroll && n._contentDraggable.call(this), 
                    f.mouseWheel.enable) {
                        var g;
                        b();
                    }
                    n._draggerRail.call(this), n._wrapperScroll.call(this), f.advanced.autoScrollOnFocus && n._focus.call(this), 
                    f.scrollButtons.enable && n._buttons.call(this), f.keyboard.enable && n._keyboard.call(this), 
                    d.bindEvents = !0;
                }
            },
            _unbindEvents: function() {
                var b = a(this), d = b.data(e), f = d.opt, g = e + "_" + d.idx, h = ".mCSB_" + d.idx + "_scrollbar", i = a("#mCSB_" + d.idx + ",#mCSB_" + d.idx + "_container,#mCSB_" + d.idx + "_container_wrapper," + h + " .mCSB_draggerContainer,#mCSB_" + d.idx + "_dragger_vertical,#mCSB_" + d.idx + "_dragger_horizontal," + h + ">a"), j = a("#mCSB_" + d.idx + "_container");
                f.advanced.releaseDraggableSelectors && i.add(a(f.advanced.releaseDraggableSelectors)), 
                d.bindEvents && (a(c).unbind("." + g), i.each(function() {
                    a(this).unbind("." + g);
                }), clearTimeout(b[0]._focusTimeout), n._delete.call(null, b[0]._focusTimeout), 
                clearTimeout(d.sequential.step), n._delete.call(null, d.sequential.step), clearTimeout(j[0].onCompleteTimeout), 
                n._delete.call(null, j[0].onCompleteTimeout), d.bindEvents = !1);
            },
            _scrollbarVisibility: function(b) {
                var c = a(this), d = c.data(e), f = d.opt, g = a("#mCSB_" + d.idx + "_container_wrapper"), h = g.length ? g : a("#mCSB_" + d.idx + "_container"), i = [ a("#mCSB_" + d.idx + "_scrollbar_vertical"), a("#mCSB_" + d.idx + "_scrollbar_horizontal") ], j = [ i[0].find(".mCSB_dragger"), i[1].find(".mCSB_dragger") ];
                "x" !== f.axis && (d.overflowed[0] && !b ? (i[0].add(j[0]).add(i[0].children("a")).css("display", "block"), 
                h.removeClass("mCS_no_scrollbar_y mCS_y_hidden")) : (f.alwaysShowScrollbar ? (2 !== f.alwaysShowScrollbar && j[0].add(i[0].children("a")).css("display", "none"), 
                h.removeClass("mCS_y_hidden")) : (i[0].css("display", "none"), h.addClass("mCS_y_hidden")), 
                h.addClass("mCS_no_scrollbar_y"))), "y" !== f.axis && (d.overflowed[1] && !b ? (i[1].add(j[1]).add(i[1].children("a")).css("display", "block"), 
                h.removeClass("mCS_no_scrollbar_x mCS_x_hidden")) : (f.alwaysShowScrollbar ? (2 !== f.alwaysShowScrollbar && j[1].add(i[1].children("a")).css("display", "none"), 
                h.removeClass("mCS_x_hidden")) : (i[1].css("display", "none"), h.addClass("mCS_x_hidden")), 
                h.addClass("mCS_no_scrollbar_x"))), d.overflowed[0] || d.overflowed[1] ? c.removeClass("mCS_no_scrollbar") : c.addClass("mCS_no_scrollbar");
            },
            _coordinates: function(a) {
                var b = a.type;
                switch (b) {
                  case "pointerdown":
                  case "MSPointerDown":
                  case "pointermove":
                  case "MSPointerMove":
                  case "pointerup":
                  case "MSPointerUp":
                    return [ a.originalEvent.pageY, a.originalEvent.pageX, !1 ];

                  case "touchstart":
                  case "touchmove":
                  case "touchend":
                    var c = a.originalEvent.touches[0] || a.originalEvent.changedTouches[0], d = a.originalEvent.touches.length || a.originalEvent.changedTouches.length;
                    return [ c.pageY, c.pageX, d > 1 ];

                  default:
                    return [ a.pageY, a.pageX, !1 ];
                }
            },
            _draggable: function() {
                function b(a) {
                    var b = q.find("iframe");
                    if (b.length) {
                        var c = a ? "auto" : "none";
                        b.css("pointer-events", c);
                    }
                }
                function d(a, b, c, d) {
                    if (q[0].idleTimer = m.scrollInertia < 233 ? 250 : 0, f.attr("id") === p[1]) var e = "x", g = (f[0].offsetLeft - b + d) * j.scrollRatio.x; else var e = "y", g = (f[0].offsetTop - a + c) * j.scrollRatio.y;
                    n._scrollTo(i, g.toString(), {
                        dir: e,
                        drag: !0
                    });
                }
                var f, g, h, i = a(this), j = i.data(e), m = j.opt, o = e + "_" + j.idx, p = [ "mCSB_" + j.idx + "_dragger_vertical", "mCSB_" + j.idx + "_dragger_horizontal" ], q = a("#mCSB_" + j.idx + "_container"), r = a("#" + p[0] + ",#" + p[1]), s = m.advanced.releaseDraggableSelectors ? r.add(a(m.advanced.releaseDraggableSelectors)) : r;
                r.bind("mousedown." + o + " touchstart." + o + " pointerdown." + o + " MSPointerDown." + o, function(d) {
                    if (d.stopImmediatePropagation(), d.preventDefault(), n._mouseBtnLeft(d)) {
                        l = !0, k && (c.onselectstart = function() {
                            return !1;
                        }), b(!1), n._stop(i), f = a(this);
                        var e = f.offset(), j = n._coordinates(d)[0] - e.top, o = n._coordinates(d)[1] - e.left, p = f.height() + e.top, q = f.width() + e.left;
                        p > j && j > 0 && q > o && o > 0 && (g = j, h = o), n._onDragClasses(f, "active", m.autoExpandScrollbar);
                    }
                }).bind("touchmove." + o, function(a) {
                    a.stopImmediatePropagation(), a.preventDefault();
                    var b = f.offset(), c = n._coordinates(a)[0] - b.top, e = n._coordinates(a)[1] - b.left;
                    d(g, h, c, e);
                }), a(c).bind("mousemove." + o + " pointermove." + o + " MSPointerMove." + o, function(a) {
                    if (f) {
                        var b = f.offset(), c = n._coordinates(a)[0] - b.top, e = n._coordinates(a)[1] - b.left;
                        if (g === c) return;
                        d(g, h, c, e);
                    }
                }).add(s).bind("mouseup." + o + " touchend." + o + " pointerup." + o + " MSPointerUp." + o, function() {
                    f && (n._onDragClasses(f, "active", m.autoExpandScrollbar), f = null), l = !1, k && (c.onselectstart = null), 
                    b(!0);
                });
            },
            _contentDraggable: function() {
                function b(a, b) {
                    var c = [ 1.5 * b, 2 * b, b / 1.5, b / 2 ];
                    return a > 90 ? b > 4 ? c[0] : c[3] : a > 60 ? b > 3 ? c[3] : c[2] : a > 30 ? b > 8 ? c[1] : b > 6 ? c[0] : b > 4 ? b : c[2] : b > 8 ? b : c[3];
                }
                function c(a, b, c, d, e, f) {
                    a && n._scrollTo(r, a.toString(), {
                        dur: b,
                        scrollEasing: c,
                        dir: d,
                        overwrite: e,
                        drag: f
                    });
                }
                var d, f, g, h, i, j, k, m, o, p, q, r = a(this), s = r.data(e), t = s.opt, u = e + "_" + s.idx, v = a("#mCSB_" + s.idx), w = a("#mCSB_" + s.idx + "_container"), x = [ a("#mCSB_" + s.idx + "_dragger_vertical"), a("#mCSB_" + s.idx + "_dragger_horizontal") ], y = [], z = [], A = 0, B = "yx" === t.axis ? "none" : "all", C = [];
                w.bind("touchstart." + u + " pointerdown." + u + " MSPointerDown." + u, function(a) {
                    if (n._pointerTouch(a) && !l && !n._coordinates(a)[2]) {
                        var b = w.offset();
                        d = n._coordinates(a)[0] - b.top, f = n._coordinates(a)[1] - b.left, C = [ n._coordinates(a)[0], n._coordinates(a)[1] ];
                    }
                }).bind("touchmove." + u + " pointermove." + u + " MSPointerMove." + u, function(a) {
                    if (n._pointerTouch(a) && !l && !n._coordinates(a)[2]) {
                        a.stopImmediatePropagation(), j = n._getTime();
                        var b = v.offset(), e = n._coordinates(a)[0] - b.top, g = n._coordinates(a)[1] - b.left, h = "mcsLinearOut";
                        if (y.push(e), z.push(g), C[2] = Math.abs(n._coordinates(a)[0] - C[0]), C[3] = Math.abs(n._coordinates(a)[1] - C[1]), 
                        s.overflowed[0]) var i = x[0].parent().height() - x[0].height(), k = d - e > 0 && e - d > -(i * s.scrollRatio.y) && (2 * C[3] < C[2] || "yx" === t.axis);
                        if (s.overflowed[1]) var m = x[1].parent().width() - x[1].width(), o = f - g > 0 && g - f > -(m * s.scrollRatio.x) && (2 * C[2] < C[3] || "yx" === t.axis);
                        (k || o) && a.preventDefault(), p = "yx" === t.axis ? [ d - e, f - g ] : "x" === t.axis ? [ null, f - g ] : [ d - e, null ], 
                        w[0].idleTimer = 250, s.overflowed[0] && c(p[0], A, h, "y", "all", !0), s.overflowed[1] && c(p[1], A, h, "x", B, !0);
                    }
                }), v.bind("touchstart." + u + " pointerdown." + u + " MSPointerDown." + u, function(a) {
                    if (n._pointerTouch(a) && !l && !n._coordinates(a)[2]) {
                        a.stopImmediatePropagation(), n._stop(r), i = n._getTime();
                        var b = v.offset();
                        g = n._coordinates(a)[0] - b.top, h = n._coordinates(a)[1] - b.left, y = [], z = [];
                    }
                }).bind("touchend." + u + " pointerup." + u + " MSPointerUp." + u, function(a) {
                    if (n._pointerTouch(a) && !l && !n._coordinates(a)[2]) {
                        a.stopImmediatePropagation(), k = n._getTime();
                        var d = v.offset(), e = n._coordinates(a)[0] - d.top, f = n._coordinates(a)[1] - d.left;
                        if (!(k - j > 30)) {
                            o = 1e3 / (k - i);
                            var r = "mcsEaseOut", u = 2.5 > o, x = u ? [ y[y.length - 2], z[z.length - 2] ] : [ 0, 0 ];
                            m = u ? [ e - x[0], f - x[1] ] : [ e - g, f - h ];
                            var A = [ Math.abs(m[0]), Math.abs(m[1]) ];
                            o = u ? [ Math.abs(m[0] / 4), Math.abs(m[1] / 4) ] : [ o, o ];
                            var C = [ Math.abs(w[0].offsetTop) - m[0] * b(A[0] / o[0], o[0]), Math.abs(w[0].offsetLeft) - m[1] * b(A[1] / o[1], o[1]) ];
                            p = "yx" === t.axis ? [ C[0], C[1] ] : "x" === t.axis ? [ null, C[1] ] : [ C[0], null ], 
                            q = [ 4 * A[0] + t.scrollInertia, 4 * A[1] + t.scrollInertia ];
                            var D = parseInt(t.contentTouchScroll) || 0;
                            p[0] = A[0] > D ? p[0] : 0, p[1] = A[1] > D ? p[1] : 0, s.overflowed[0] && c(p[0], q[0], r, "y", B, !1), 
                            s.overflowed[1] && c(p[1], q[1], r, "x", B, !1);
                        }
                    }
                });
            },
            _mousewheel: function() {
                function b(a) {
                    var b = null;
                    try {
                        var c = a.contentDocument || a.contentWindow.document;
                        b = c.body.innerHTML;
                    } catch (d) {}
                    return null !== b;
                }
                var c = a(this), d = c.data(e);
                if (d) {
                    var f = d.opt, g = e + "_" + d.idx, h = a("#mCSB_" + d.idx), i = [ a("#mCSB_" + d.idx + "_dragger_vertical"), a("#mCSB_" + d.idx + "_dragger_horizontal") ], j = a("#mCSB_" + d.idx + "_container").find("iframe"), l = h;
                    j.length && j.each(function() {
                        var c = this;
                        b(c) && (l = l.add(a(c).contents().find("body")));
                    }), l.bind("mousewheel." + g, function(b, e) {
                        if (n._stop(c), !n._disableMousewheel(c, b.target)) {
                            var g = "auto" !== f.mouseWheel.deltaFactor ? parseInt(f.mouseWheel.deltaFactor) : k && b.deltaFactor < 100 ? 100 : b.deltaFactor || 100;
                            if ("x" === f.axis || "x" === f.mouseWheel.axis) var j = "x", l = [ Math.round(g * d.scrollRatio.x), parseInt(f.mouseWheel.scrollAmount) ], m = "auto" !== f.mouseWheel.scrollAmount ? l[1] : l[0] >= h.width() ? .9 * h.width() : l[0], o = Math.abs(a("#mCSB_" + d.idx + "_container")[0].offsetLeft), p = i[1][0].offsetLeft, q = i[1].parent().width() - i[1].width(), r = b.deltaX || b.deltaY || e; else var j = "y", l = [ Math.round(g * d.scrollRatio.y), parseInt(f.mouseWheel.scrollAmount) ], m = "auto" !== f.mouseWheel.scrollAmount ? l[1] : l[0] >= h.height() ? .9 * h.height() : l[0], o = Math.abs(a("#mCSB_" + d.idx + "_container")[0].offsetTop), p = i[0][0].offsetTop, q = i[0].parent().height() - i[0].height(), r = b.deltaY || e;
                            "y" === j && !d.overflowed[0] || "x" === j && !d.overflowed[1] || (f.mouseWheel.invert && (r = -r), 
                            f.mouseWheel.normalizeDelta && (r = 0 > r ? -1 : 1), (r > 0 && 0 !== p || 0 > r && p !== q || f.mouseWheel.preventDefault) && (b.stopImmediatePropagation(), 
                            b.preventDefault()), n._scrollTo(c, (o - r * m).toString(), {
                                dir: j
                            }));
                        }
                    });
                }
            },
            _disableMousewheel: function(b, c) {
                var d = c.nodeName.toLowerCase(), f = b.data(e).opt.mouseWheel.disableOver, g = [ "select", "textarea" ];
                return a.inArray(d, f) > -1 && !(a.inArray(d, g) > -1 && !a(c).is(":focus"));
            },
            _draggerRail: function() {
                var b = a(this), c = b.data(e), d = e + "_" + c.idx, f = a("#mCSB_" + c.idx + "_container"), g = f.parent(), h = a(".mCSB_" + c.idx + "_scrollbar .mCSB_draggerContainer");
                h.bind("touchstart." + d + " pointerdown." + d + " MSPointerDown." + d, function() {
                    l = !0;
                }).bind("touchend." + d + " pointerup." + d + " MSPointerUp." + d, function() {
                    l = !1;
                }).bind("click." + d, function(d) {
                    if (a(d.target).hasClass("mCSB_draggerContainer") || a(d.target).hasClass("mCSB_draggerRail")) {
                        n._stop(b);
                        var e = a(this), h = e.find(".mCSB_dragger");
                        if (e.parent(".mCSB_scrollTools_horizontal").length > 0) {
                            if (!c.overflowed[1]) return;
                            var i = "x", j = d.pageX > h.offset().left ? -1 : 1, k = Math.abs(f[0].offsetLeft) - .9 * j * g.width();
                        } else {
                            if (!c.overflowed[0]) return;
                            var i = "y", j = d.pageY > h.offset().top ? -1 : 1, k = Math.abs(f[0].offsetTop) - .9 * j * g.height();
                        }
                        n._scrollTo(b, k.toString(), {
                            dir: i,
                            scrollEasing: "mcsEaseInOut"
                        });
                    }
                });
            },
            _focus: function() {
                var b = a(this), d = b.data(e), f = d.opt, g = e + "_" + d.idx, h = a("#mCSB_" + d.idx + "_container"), i = h.parent();
                h.bind("focusin." + g, function() {
                    var d = a(c.activeElement), e = h.find(".mCustomScrollBox").length, g = 0;
                    d.is(f.advanced.autoScrollOnFocus) && (n._stop(b), clearTimeout(b[0]._focusTimeout), 
                    b[0]._focusTimer = e ? (g + 17) * e : 0, b[0]._focusTimeout = setTimeout(function() {
                        var a = [ d.offset().top - h.offset().top, d.offset().left - h.offset().left ], c = [ h[0].offsetTop, h[0].offsetLeft ], e = [ c[0] + a[0] >= 0 && c[0] + a[0] < i.height() - d.outerHeight(!1), c[1] + a[1] >= 0 && c[0] + a[1] < i.width() - d.outerWidth(!1) ], j = "yx" !== f.axis || e[0] || e[1] ? "all" : "none";
                        "x" === f.axis || e[0] || n._scrollTo(b, a[0].toString(), {
                            dir: "y",
                            scrollEasing: "mcsEaseInOut",
                            overwrite: j,
                            dur: g
                        }), "y" === f.axis || e[1] || n._scrollTo(b, a[1].toString(), {
                            dir: "x",
                            scrollEasing: "mcsEaseInOut",
                            overwrite: j,
                            dur: g
                        });
                    }, b[0]._focusTimer));
                });
            },
            _wrapperScroll: function() {
                var b = a(this), c = b.data(e), d = e + "_" + c.idx, f = a("#mCSB_" + c.idx + "_container").parent();
                f.bind("scroll." + d, function() {
                    (0 !== f.scrollTop() || 0 !== f.scrollLeft()) && a(".mCSB_" + c.idx + "_scrollbar").css("visibility", "hidden");
                });
            },
            _buttons: function() {
                var b = a(this), c = b.data(e), d = c.opt, f = c.sequential, g = e + "_" + c.idx, h = (a("#mCSB_" + c.idx + "_container"), 
                ".mCSB_" + c.idx + "_scrollbar"), i = a(h + ">a");
                i.bind("mousedown." + g + " touchstart." + g + " pointerdown." + g + " MSPointerDown." + g + " mouseup." + g + " touchend." + g + " pointerup." + g + " MSPointerUp." + g + " mouseout." + g + " pointerout." + g + " MSPointerOut." + g + " click." + g, function(e) {
                    function g(a, c) {
                        f.scrollAmount = d.snapAmount || d.scrollButtons.scrollAmount, n._sequentialScroll.call(this, b, a, c);
                    }
                    if (e.preventDefault(), n._mouseBtnLeft(e)) {
                        var h = a(this).attr("class");
                        switch (f.type = d.scrollButtons.scrollType, e.type) {
                          case "mousedown":
                          case "touchstart":
                          case "pointerdown":
                          case "MSPointerDown":
                            if ("stepped" === f.type) return;
                            l = !0, c.tweenRunning = !1, g("on", h);
                            break;

                          case "mouseup":
                          case "touchend":
                          case "pointerup":
                          case "MSPointerUp":
                          case "mouseout":
                          case "pointerout":
                          case "MSPointerOut":
                            if ("stepped" === f.type) return;
                            l = !1, f.dir && g("off", h);
                            break;

                          case "click":
                            if ("stepped" !== f.type || c.tweenRunning) return;
                            g("on", h);
                        }
                    }
                });
            },
            _keyboard: function() {
                var b = a(this), d = b.data(e), f = d.opt, g = d.sequential, h = e + "_" + d.idx, i = a("#mCSB_" + d.idx), j = a("#mCSB_" + d.idx + "_container"), k = j.parent(), l = "input,textarea,select,datalist,keygen,[contenteditable='true']";
                i.attr("tabindex", "0").bind("blur." + h + " keydown." + h + " keyup." + h, function(e) {
                    function h(a, c) {
                        g.type = f.keyboard.scrollType, g.scrollAmount = f.snapAmount || f.keyboard.scrollAmount, 
                        "stepped" === g.type && d.tweenRunning || n._sequentialScroll.call(this, b, a, c);
                    }
                    switch (e.type) {
                      case "blur":
                        d.tweenRunning && g.dir && h("off", null);
                        break;

                      case "keydown":
                      case "keyup":
                        var i = e.keyCode ? e.keyCode : e.which, m = "on";
                        if ("x" !== f.axis && (38 === i || 40 === i) || "y" !== f.axis && (37 === i || 39 === i)) {
                            if ((38 === i || 40 === i) && !d.overflowed[0] || (37 === i || 39 === i) && !d.overflowed[1]) return;
                            "keyup" === e.type && (m = "off"), a(c.activeElement).is(l) || (e.preventDefault(), 
                            e.stopImmediatePropagation(), h(m, i));
                        } else if (33 === i || 34 === i) {
                            if ((d.overflowed[0] || d.overflowed[1]) && (e.preventDefault(), e.stopImmediatePropagation()), 
                            "keyup" === e.type) {
                                n._stop(b);
                                var o = 34 === i ? -1 : 1;
                                if ("x" === f.axis || "yx" === f.axis && d.overflowed[1] && !d.overflowed[0]) var p = "x", q = Math.abs(j[0].offsetLeft) - .9 * o * k.width(); else var p = "y", q = Math.abs(j[0].offsetTop) - .9 * o * k.height();
                                n._scrollTo(b, q.toString(), {
                                    dir: p,
                                    scrollEasing: "mcsEaseInOut"
                                });
                            }
                        } else if ((35 === i || 36 === i) && !a(c.activeElement).is(l) && ((d.overflowed[0] || d.overflowed[1]) && (e.preventDefault(), 
                        e.stopImmediatePropagation()), "keyup" === e.type)) {
                            if ("x" === f.axis || "yx" === f.axis && d.overflowed[1] && !d.overflowed[0]) var p = "x", q = 35 === i ? Math.abs(k.width() - j.outerWidth(!1)) : 0; else var p = "y", q = 35 === i ? Math.abs(k.height() - j.outerHeight(!1)) : 0;
                            n._scrollTo(b, q.toString(), {
                                dir: p,
                                scrollEasing: "mcsEaseInOut"
                            });
                        }
                    }
                });
            },
            _sequentialScroll: function(b, c, d) {
                function f(a) {
                    var c = "stepped" !== j.type, d = a ? c ? i.scrollInertia / 1.5 : i.scrollInertia : 1e3 / 60, e = a ? c ? 7.5 : 40 : 2.5, g = [ Math.abs(k[0].offsetTop), Math.abs(k[0].offsetLeft) ], l = [ h.scrollRatio.y > 10 ? 10 : h.scrollRatio.y, h.scrollRatio.x > 10 ? 10 : h.scrollRatio.x ], m = "x" === j.dir[0] ? g[1] + j.dir[1] * l[1] * e : g[0] + j.dir[1] * l[0] * e, o = "x" === j.dir[0] ? g[1] + j.dir[1] * parseInt(j.scrollAmount) : g[0] + j.dir[1] * parseInt(j.scrollAmount), p = "auto" !== j.scrollAmount ? o : m, q = a ? c ? "mcsLinearOut" : "mcsEaseInOut" : "mcsLinear", r = a ? !0 : !1;
                    return a && 17 > d && (p = "x" === j.dir[0] ? g[1] : g[0]), n._scrollTo(b, p.toString(), {
                        dir: j.dir[0],
                        scrollEasing: q,
                        dur: d,
                        onComplete: r
                    }), a ? void (j.dir = !1) : (clearTimeout(j.step), void (j.step = setTimeout(function() {
                        f();
                    }, d)));
                }
                function g() {
                    clearTimeout(j.step), n._stop(b);
                }
                var h = b.data(e), i = h.opt, j = h.sequential, k = a("#mCSB_" + h.idx + "_container"), l = "stepped" === j.type ? !0 : !1;
                switch (c) {
                  case "on":
                    if (j.dir = [ "mCSB_buttonRight" === d || "mCSB_buttonLeft" === d || 39 === d || 37 === d ? "x" : "y", "mCSB_buttonUp" === d || "mCSB_buttonLeft" === d || 38 === d || 37 === d ? -1 : 1 ], 
                    n._stop(b), n._isNumeric(d) && "stepped" === j.type) return;
                    f(l);
                    break;

                  case "off":
                    g(), (l || h.tweenRunning && j.dir) && f(!0);
                }
            },
            _arr: function(b) {
                var c = a(this).data(e).opt, d = [];
                return "function" == typeof b && (b = b()), b instanceof Array ? d = b.length > 1 ? [ b[0], b[1] ] : "x" === c.axis ? [ null, b[0] ] : [ b[0], null ] : (d[0] = b.y ? b.y : b.x || "x" === c.axis ? null : b, 
                d[1] = b.x ? b.x : b.y || "y" === c.axis ? null : b), "function" == typeof d[0] && (d[0] = d[0]()), 
                "function" == typeof d[1] && (d[1] = d[1]()), d;
            },
            _to: function(b, c) {
                if (null != b && "undefined" != typeof b) {
                    var d = a(this), f = d.data(e), g = f.opt, h = a("#mCSB_" + f.idx + "_container"), i = h.parent(), j = typeof b;
                    c || (c = "x" === g.axis ? "x" : "y");
                    var k = "x" === c ? h.outerWidth(!1) : h.outerHeight(!1), l = "x" === c ? h.offset().left : h.offset().top, o = "x" === c ? h[0].offsetLeft : h[0].offsetTop, p = "x" === c ? "left" : "top";
                    switch (j) {
                      case "function":
                        return b();

                      case "object":
                        if (b.nodeType) var q = "x" === c ? a(b).offset().left : a(b).offset().top; else if (b.jquery) {
                            if (!b.length) return;
                            var q = "x" === c ? b.offset().left : b.offset().top;
                        }
                        return q - l;

                      case "string":
                      case "number":
                        if (n._isNumeric.call(null, b)) return Math.abs(b);
                        if (-1 !== b.indexOf("%")) return Math.abs(k * parseInt(b) / 100);
                        if (-1 !== b.indexOf("-=")) return Math.abs(o - parseInt(b.split("-=")[1]));
                        if (-1 !== b.indexOf("+=")) {
                            var r = o + parseInt(b.split("+=")[1]);
                            return r >= 0 ? 0 : Math.abs(r);
                        }
                        if (-1 !== b.indexOf("px") && n._isNumeric.call(null, b.split("px")[0])) return Math.abs(b.split("px")[0]);
                        if ("top" === b || "left" === b) return 0;
                        if ("bottom" === b) return Math.abs(i.height() - h.outerHeight(!1));
                        if ("right" === b) return Math.abs(i.width() - h.outerWidth(!1));
                        if ("first" === b || "last" === b) {
                            var s = h.find(":" + b), q = "x" === c ? a(s).offset().left : a(s).offset().top;
                            return q - l;
                        }
                        if (a(b).length) {
                            var q = "x" === c ? a(b).offset().left : a(b).offset().top;
                            return q - l;
                        }
                        return h.css(p, b), void m.update.call(null, d[0]);
                    }
                }
            },
            _autoUpdate: function(b) {
                function c() {
                    clearTimeout(l[0].autoUpdate), l[0].autoUpdate = setTimeout(function() {
                        return k.advanced.updateOnSelectorChange && (o = g(), o !== u) ? (h(), void (u = o)) : (k.advanced.updateOnContentResize && (p = [ l.outerHeight(!1), l.outerWidth(!1), r.height(), r.width(), t()[0], t()[1] ], 
                        (p[0] !== v[0] || p[1] !== v[1] || p[2] !== v[2] || p[3] !== v[3] || p[4] !== v[4] || p[5] !== v[5]) && (h(), 
                        v = p)), k.advanced.updateOnImageLoad && (q = d(), q !== w && (l.find("img").each(function() {
                            f(this.src);
                        }), w = q)), void ((k.advanced.updateOnSelectorChange || k.advanced.updateOnContentResize || k.advanced.updateOnImageLoad) && c()));
                    }, 60);
                }
                function d() {
                    var a = 0;
                    return k.advanced.updateOnImageLoad && (a = l.find("img").length), a;
                }
                function f(a) {
                    function b(a, b) {
                        return function() {
                            return b.apply(a, arguments);
                        };
                    }
                    function c() {
                        this.onload = null, h();
                    }
                    var d = new Image();
                    d.onload = b(d, c), d.src = a;
                }
                function g() {
                    k.advanced.updateOnSelectorChange === !0 && (k.advanced.updateOnSelectorChange = "*");
                    var b = 0, c = l.find(k.advanced.updateOnSelectorChange);
                    return k.advanced.updateOnSelectorChange && c.length > 0 && c.each(function() {
                        b += a(this).height() + a(this).width();
                    }), b;
                }
                function h() {
                    clearTimeout(l[0].autoUpdate), m.update.call(null, i[0]);
                }
                var i = a(this), j = i.data(e), k = j.opt, l = a("#mCSB_" + j.idx + "_container");
                if (b) return clearTimeout(l[0].autoUpdate), void n._delete.call(null, l[0].autoUpdate);
                var o, p, q, r = l.parent(), s = [ a("#mCSB_" + j.idx + "_scrollbar_vertical"), a("#mCSB_" + j.idx + "_scrollbar_horizontal") ], t = function() {
                    return [ s[0].is(":visible") ? s[0].outerHeight(!0) : 0, s[1].is(":visible") ? s[1].outerWidth(!0) : 0 ];
                }, u = g(), v = [ l.outerHeight(!1), l.outerWidth(!1), r.height(), r.width(), t()[0], t()[1] ], w = d();
                c();
            },
            _snapAmount: function(a, b, c) {
                return Math.round(a / b) * b - c;
            },
            _stop: function(b) {
                var c = b.data(e), d = a("#mCSB_" + c.idx + "_container,#mCSB_" + c.idx + "_container_wrapper,#mCSB_" + c.idx + "_dragger_vertical,#mCSB_" + c.idx + "_dragger_horizontal");
                d.each(function() {
                    n._stopTween.call(this);
                });
            },
            _scrollTo: function(b, c, d) {
                function f(a) {
                    return i && j.callbacks[a] && "function" == typeof j.callbacks[a];
                }
                function g() {
                    return [ j.callbacks.alwaysTriggerOffsets || u >= v[0] + x, j.callbacks.alwaysTriggerOffsets || -y >= u ];
                }
                function h() {
                    var a = [ o[0].offsetTop, o[0].offsetLeft ], c = [ s[0].offsetTop, s[0].offsetLeft ], e = [ o.outerHeight(!1), o.outerWidth(!1) ], f = [ m.height(), m.width() ];
                    b[0].mcs = {
                        content: o,
                        top: a[0],
                        left: a[1],
                        draggerTop: c[0],
                        draggerLeft: c[1],
                        topPct: Math.round(100 * Math.abs(a[0]) / (Math.abs(e[0]) - f[0])),
                        leftPct: Math.round(100 * Math.abs(a[1]) / (Math.abs(e[1]) - f[1])),
                        direction: d.dir
                    };
                }
                var i = b.data(e), j = i.opt, k = {
                    trigger: "internal",
                    dir: "y",
                    scrollEasing: "mcsEaseOut",
                    drag: !1,
                    dur: j.scrollInertia,
                    overwrite: "all",
                    callbacks: !0,
                    onStart: !0,
                    onUpdate: !0,
                    onComplete: !0
                }, d = a.extend(k, d), l = [ d.dur, d.drag ? 0 : d.dur ], m = a("#mCSB_" + i.idx), o = a("#mCSB_" + i.idx + "_container"), p = o.parent(), q = j.callbacks.onTotalScrollOffset ? n._arr.call(b, j.callbacks.onTotalScrollOffset) : [ 0, 0 ], r = j.callbacks.onTotalScrollBackOffset ? n._arr.call(b, j.callbacks.onTotalScrollBackOffset) : [ 0, 0 ];
                if (i.trigger = d.trigger, (0 !== p.scrollTop() || 0 !== p.scrollLeft()) && (a(".mCSB_" + i.idx + "_scrollbar").css("visibility", "visible"), 
                p.scrollTop(0).scrollLeft(0)), "_resetY" !== c || i.contentReset.y || (f("onOverflowYNone") && j.callbacks.onOverflowYNone.call(b[0]), 
                i.contentReset.y = 1), "_resetX" !== c || i.contentReset.x || (f("onOverflowXNone") && j.callbacks.onOverflowXNone.call(b[0]), 
                i.contentReset.x = 1), "_resetY" !== c && "_resetX" !== c) {
                    switch (!i.contentReset.y && b[0].mcs || !i.overflowed[0] || (f("onOverflowY") && j.callbacks.onOverflowY.call(b[0]), 
                    i.contentReset.x = null), !i.contentReset.x && b[0].mcs || !i.overflowed[1] || (f("onOverflowX") && j.callbacks.onOverflowX.call(b[0]), 
                    i.contentReset.x = null), j.snapAmount && (c = n._snapAmount(c, j.snapAmount, j.snapOffset)), 
                    d.dir) {
                      case "x":
                        var s = a("#mCSB_" + i.idx + "_dragger_horizontal"), t = "left", u = o[0].offsetLeft, v = [ m.width() - o.outerWidth(!1), s.parent().width() - s.width() ], w = [ c, 0 === c ? 0 : c / i.scrollRatio.x ], x = q[1], y = r[1], z = x > 0 ? x / i.scrollRatio.x : 0, A = y > 0 ? y / i.scrollRatio.x : 0;
                        break;

                      case "y":
                        var s = a("#mCSB_" + i.idx + "_dragger_vertical"), t = "top", u = o[0].offsetTop, v = [ m.height() - o.outerHeight(!1), s.parent().height() - s.height() ], w = [ c, 0 === c ? 0 : c / i.scrollRatio.y ], x = q[0], y = r[0], z = x > 0 ? x / i.scrollRatio.y : 0, A = y > 0 ? y / i.scrollRatio.y : 0;
                    }
                    w[1] < 0 || 0 === w[0] && 0 === w[1] ? w = [ 0, 0 ] : w[1] >= v[1] ? w = [ v[0], v[1] ] : w[0] = -w[0], 
                    b[0].mcs || (h(), f("onInit") && j.callbacks.onInit.call(b[0])), clearTimeout(o[0].onCompleteTimeout), 
                    (i.tweenRunning || !(0 === u && w[0] >= 0 || u === v[0] && w[0] <= v[0])) && (n._tweenTo.call(null, s[0], t, Math.round(w[1]), l[1], d.scrollEasing), 
                    n._tweenTo.call(null, o[0], t, Math.round(w[0]), l[0], d.scrollEasing, d.overwrite, {
                        onStart: function() {
                            d.callbacks && d.onStart && !i.tweenRunning && (f("onScrollStart") && (h(), j.callbacks.onScrollStart.call(b[0])), 
                            i.tweenRunning = !0, n._onDragClasses(s), i.cbOffsets = g());
                        },
                        onUpdate: function() {
                            d.callbacks && d.onUpdate && f("whileScrolling") && (h(), j.callbacks.whileScrolling.call(b[0]));
                        },
                        onComplete: function() {
                            if (d.callbacks && d.onComplete) {
                                "yx" === j.axis && clearTimeout(o[0].onCompleteTimeout);
                                var a = o[0].idleTimer || 0;
                                o[0].onCompleteTimeout = setTimeout(function() {
                                    f("onScroll") && (h(), j.callbacks.onScroll.call(b[0])), f("onTotalScroll") && w[1] >= v[1] - z && i.cbOffsets[0] && (h(), 
                                    j.callbacks.onTotalScroll.call(b[0])), f("onTotalScrollBack") && w[1] <= A && i.cbOffsets[1] && (h(), 
                                    j.callbacks.onTotalScrollBack.call(b[0])), i.tweenRunning = !1, o[0].idleTimer = 0, 
                                    n._onDragClasses(s, "hide");
                                }, a);
                            }
                        }
                    }));
                }
            },
            _tweenTo: function(a, c, d, e, f, g, h) {
                function i() {
                    x.stop || (u || q.call(), u = n._getTime() - t, j(), u >= x.time && (x.time = u > x.time ? u + o - (u - x.time) : u + o - 1, 
                    x.time < u + 1 && (x.time = u + 1)), x.time < e ? x.id = p(i) : s.call());
                }
                function j() {
                    e > 0 ? (x.currVal = m(x.time, v, y, e, f), w[c] = Math.round(x.currVal) + "px") : w[c] = d + "px", 
                    r.call();
                }
                function k() {
                    o = 1e3 / 60, x.time = u + o, p = b.requestAnimationFrame ? b.requestAnimationFrame : function(a) {
                        return j(), setTimeout(a, .01);
                    }, x.id = p(i);
                }
                function l() {
                    null != x.id && (b.requestAnimationFrame ? b.cancelAnimationFrame(x.id) : clearTimeout(x.id), 
                    x.id = null);
                }
                function m(a, b, c, d, e) {
                    switch (e) {
                      case "linear":
                      case "mcsLinear":
                        return c * a / d + b;

                      case "mcsLinearOut":
                        return a /= d, a--, c * Math.sqrt(1 - a * a) + b;

                      case "easeInOutSmooth":
                        return a /= d / 2, 1 > a ? c / 2 * a * a + b : (a--, -c / 2 * (a * (a - 2) - 1) + b);

                      case "easeInOutStrong":
                        return a /= d / 2, 1 > a ? c / 2 * Math.pow(2, 10 * (a - 1)) + b : (a--, c / 2 * (-Math.pow(2, -10 * a) + 2) + b);

                      case "easeInOut":
                      case "mcsEaseInOut":
                        return a /= d / 2, 1 > a ? c / 2 * a * a * a + b : (a -= 2, c / 2 * (a * a * a + 2) + b);

                      case "easeOutSmooth":
                        return a /= d, a--, -c * (a * a * a * a - 1) + b;

                      case "easeOutStrong":
                        return c * (-Math.pow(2, -10 * a / d) + 1) + b;

                      case "easeOut":
                      case "mcsEaseOut":
                      default:
                        var f = (a /= d) * a, g = f * a;
                        return b + c * (.499999999999997 * g * f + -2.5 * f * f + 5.5 * g + -6.5 * f + 4 * a);
                    }
                }
                a._malihuTween || (a._malihuTween = {
                    top: {},
                    left: {}
                });
                var o, p, h = h || {}, q = h.onStart || function() {}, r = h.onUpdate || function() {}, s = h.onComplete || function() {}, t = n._getTime(), u = 0, v = a.offsetTop, w = a.style, x = a._malihuTween[c];
                "left" === c && (v = a.offsetLeft);
                var y = d - v;
                x.stop = 0, "none" !== g && l(), k();
            },
            _getTime: function() {
                return b.performance && b.performance.now ? b.performance.now() : b.performance && b.performance.webkitNow ? b.performance.webkitNow() : Date.now ? Date.now() : new Date().getTime();
            },
            _stopTween: function() {
                var a = this;
                a._malihuTween || (a._malihuTween = {
                    top: {},
                    left: {}
                }), a._malihuTween.top.id && (b.requestAnimationFrame ? b.cancelAnimationFrame(a._malihuTween.top.id) : clearTimeout(a._malihuTween.top.id), 
                a._malihuTween.top.id = null, a._malihuTween.top.stop = 1), a._malihuTween.left.id && (b.requestAnimationFrame ? b.cancelAnimationFrame(a._malihuTween.left.id) : clearTimeout(a._malihuTween.left.id), 
                a._malihuTween.left.id = null, a._malihuTween.left.stop = 1);
            },
            _delete: function(a) {
                try {
                    delete a;
                } catch (b) {
                    a = null;
                }
            },
            _mouseBtnLeft: function(a) {
                return !(a.which && 1 !== a.which);
            },
            _pointerTouch: function(a) {
                var b = a.originalEvent.pointerType;
                return !(b && "touch" !== b && 2 !== b);
            },
            _isNumeric: function(a) {
                return !isNaN(parseFloat(a)) && isFinite(a);
            }
        };
        a.fn[d] = function(b) {
            return m[b] ? m[b].apply(this, Array.prototype.slice.call(arguments, 1)) : "object" != typeof b && b ? void a.error("Method " + b + " does not exist") : m.init.apply(this, arguments);
        }, a[d] = function(b) {
            return m[b] ? m[b].apply(this, Array.prototype.slice.call(arguments, 1)) : "object" != typeof b && b ? void a.error("Method " + b + " does not exist") : m.init.apply(this, arguments);
        }, a[d].defaults = g, b[d] = !0, a(b).load(function() {
            a(f)[d]();
        });
    });
}(jQuery, window, document);

function locations() {
    "use strict";
    var a, b = {
        center: new google.maps.LatLng(51.5087665, -.1089613),
        zoom: 10,
        mapTypeId: google.maps.MapTypeId.ROADMAP
    }, c = new google.maps.Map(document.getElementById("map_canvas"), b);
    $.ajax({
        url: "../config/development/location.json",
        type: "GET",
        dataType: "json",
        success: function(b) {
            a = b.Stores;
        }
    });
    $(".overlay").on("click", function() {
        if (navigator.geolocation) {
            $(".spinner").show();
            $(".overlay .icon-container li:nth-child(2)").css("background", "none");
            navigator.geolocation.getCurrentPosition(d, e);
        } else {
            e("Geo Location is not supported");
        }
    });
    function d(a) {
        $("body").addClass("activated");
        $(".mask, .overlay, .loading").fadeOut(300);
        $(".spinner").hide();
        f(a);
    }
    function e(a) {
        console.warn("ERROR(" + a.code + "): " + a.message);
    }
    function f(b) {
        var c = [];
        $.each(a, function(d, e) {
            a[d].distance = g(b.coords.longitude, b.coords.latitude, e.Position.Longitude, e.Position.Latitude);
            c.push(a[d]);
        });
        c.sort(function(a, b) {
            return a.distance - b.distance;
        });
        $.each(c, function(a) {
            $(".stores").append("<li id=" + a + '><p class="number">' + (a + 1) + "</p><div><h2>" + c[a].Name + "</h2><p>" + c[a].Address + '</p><a class="more-info-list">Store Details<span></span></a><p class="opening-hours">' + c[a].OpeningHours + '</p><p class="distance">' + h(c[a].distance) + "</p></div></li>");
        });
        j(c);
        i();
    }
    function g(a, b, c, d) {
        var e = 6371, f = a * (Math.PI / 180), g = b * (Math.PI / 180), h = c * (Math.PI / 180), i = d * (Math.PI / 180), j = f * e * Math.cos(g), k = g * e, l = h * e * Math.cos(d), m = i * e, n = j - l, o = k - m, p = Math.sqrt(n * n + o * o);
        return p;
    }
    function h(a) {
        if (a < 1) {
            return Math.round(a * 1e3) + " m";
        } else {
            return Math.round(a * 10) / 10 + " km";
        }
    }
    function i() {
        $(".stores-container").mCustomScrollbar({
            scrollButtons: {
                enable: true
            },
            scrollInertia: 500
        });
        $(".more-info-list").on("click", function() {
            var a = $(this).closest("li");
            $(a).find(".more-info-list span").toggleClass("open");
            $(this).parent().find(".opening-hours").slideToggle(300, function() {
                $(".stores-container").mCustomScrollbar("scrollTo", $(".stores-container").find(".mCSB_container").find(a));
            });
        });
    }
    function j(a) {
        var c = new google.maps.Map(document.getElementById("map_canvas"), b), d = [], e = new google.maps.InfoWindow(), f = new google.maps.LatLngBounds();
        $.each(a, function(b) {
            d.push([ '<div class="info-window" data-target=' + b + "><h3>" + a[b].Name + '</h3><p class="address">' + a[b].Address + "</p></div>", a[b].Position.Latitude, a[b].Position.Longitude ]);
            var g = new google.maps.LatLng(d[b][1], d[b][2]), h = new google.maps.MarkerImage("images/icon.png", null, null, null, new google.maps.Size(30, 42));
            f.extend(g);
            var i = new MarkerWithLabel({
                position: g,
                map: c,
                icon: h,
                labelContent: "" + (b + 1),
                labelAnchor: new google.maps.Point(3, 33),
                labelClass: "labels",
                labelInBackground: false
            });
            google.maps.event.addListener(i, "click", function(a, b) {
                return function() {
                    e.setContent(d[b][0]);
                    e.open(c, a);
                    k();
                };
            }(i, b));
            google.maps.event.addListener(e, "closeclick", function() {});
        });
        c.fitBounds(f);
    }
    function k() {
        var a = $(".info-window"), b = "#" + a.attr("data-target");
        $(".stores-container").mCustomScrollbar("scrollTo", $(".stores-container").find(".mCSB_container").find(b));
        if (!$(b).find(".more-info-list span").hasClass("open")) {
            $(b).find(".more-info-list span").addClass("open");
            $(b).find(".opening-hours").delay(500).slideToggle(300, function() {
                $(".stores-container").mCustomScrollbar("scrollTo", $(".stores-container").find(".mCSB_container").find(b));
            });
        }
    }
}

locations();